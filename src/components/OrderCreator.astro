---
// Componente para crear nuevas comandas (simulador)
---

<div class="bg-white rounded-lg shadow-md p-4 mb-6">
  <h2 class="text-lg font-bold mb-4 flex items-center gap-2">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
    </svg>
    Crear Nueva Comanda (Simulador)
  </h2>
  
  <form id="new-order-form" class="space-y-4">
    <!-- Mesa -->
    <div>
      <label for="table-number" class="block text-sm font-medium text-gray-700 mb-1">Número de Mesa</label>
      <div class="flex">
        <input 
          type="number" 
          id="table-number" 
          min="1" 
          class="flex-1 rounded-l border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          placeholder="Número de mesa"
        />
        <button 
          type="button"
          id="unknown-table"
          class="bg-gray-200 text-gray-700 px-3 rounded-r hover:bg-gray-300"
          title="Mesa desconocida"
        >
          ?
        </button>
      </div>
    </div>
    
    <!-- Elementos del pedido -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-1">Platos</label>
      <div id="order-items" class="space-y-2">
        <div class="flex items-start gap-2">
          <div class="flex-1">
            <input 
              type="text" 
              name="item-name[]" 
              class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              placeholder="Nombre del plato"
              required
            />
            <input 
              type="text" 
              name="item-variation[]" 
              class="w-full mt-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm"
              placeholder="Variaciones (opcional)"
            />
          </div>
          <div class="w-16">
            <input 
              type="number" 
              name="item-quantity[]" 
              min="1" 
              value="1"
              class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              placeholder="Cant."
              required
            />
          </div>
          <button type="button" class="remove-item px-2 py-1 rounded hover:bg-red-50 text-red-500" title="Eliminar">
            ✕
          </button>
        </div>
      </div>
      
      <button 
        type="button" 
        id="add-item"
        class="mt-2 inline-flex items-center px-3 py-1 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
      >
        + Añadir plato
      </button>
    </div>
    
    <!-- Instrucciones especiales -->
    <div>
      <label for="special-instructions" class="block text-sm font-medium text-gray-700 mb-1">Instrucciones especiales</label>
      <textarea 
        id="special-instructions" 
        class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
        rows="2"
      ></textarea>
    </div>
    
    <!-- Botón enviar -->
    <div class="flex justify-end">
      <button 
        type="submit"
        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
      >
        Enviar Comanda
      </button>
    </div>
  </form>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const orderForm = document.getElementById('new-order-form');
    const orderItemsContainer = document.getElementById('order-items');
    const addItemButton = document.getElementById('add-item');
    const unknownTableButton = document.getElementById('unknown-table');
    const tableNumberInput = document.getElementById('table-number');
    
    // Manejar el botón de mesa desconocida
    if (unknownTableButton && tableNumberInput) {
      unknownTableButton.addEventListener('click', () => {
        if ((tableNumberInput as HTMLInputElement).disabled) {
          (tableNumberInput as HTMLInputElement).disabled = false;
          (tableNumberInput as HTMLInputElement).value = '';
          unknownTableButton.classList.remove('bg-indigo-600', 'text-white');
          unknownTableButton.classList.add('bg-gray-200', 'text-gray-700');
        } else {
          (tableNumberInput as HTMLInputElement).disabled = true;
          (tableNumberInput as HTMLInputElement).value = 'desconocida';
          unknownTableButton.classList.remove('bg-gray-200', 'text-gray-700');
          unknownTableButton.classList.add('bg-indigo-600', 'text-white');
        }
      });
    }
    
    // Añadir nuevo elemento al pedido
    if (addItemButton && orderItemsContainer) {
      addItemButton.addEventListener('click', () => {
        const newItem = document.createElement('div');
        newItem.className = 'flex items-start gap-2';
        newItem.innerHTML = `
          <div class="flex-1">
            <input 
              type="text" 
              name="item-name[]" 
              class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              placeholder="Nombre del plato"
              required
            />
            <input 
              type="text" 
              name="item-variation[]" 
              class="w-full mt-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm"
              placeholder="Variaciones (opcional)"
            />
          </div>
          <div class="w-16">
            <input 
              type="number" 
              name="item-quantity[]" 
              min="1" 
              value="1"
              class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              placeholder="Cant."
              required
            />
          </div>
          <button type="button" class="remove-item px-2 py-1 rounded hover:bg-red-50 text-red-500" title="Eliminar">
            ✕
          </button>
        `;
        
        orderItemsContainer.appendChild(newItem);
        
        // Añadir evento al botón de eliminar
        const removeButton = newItem.querySelector('.remove-item');
        if (removeButton) {
          removeButton.addEventListener('click', () => {
            newItem.remove();
          });
        }
      });
    }
    
    // Añadir evento a los botones de eliminar iniciales
    document.querySelectorAll('.remove-item').forEach(button => {
      button.addEventListener('click', () => {
        const itemContainer = (button as HTMLElement).closest('.flex');
        if (itemContainer && itemContainer.parentElement && itemContainer.parentElement.children.length > 1) {
          itemContainer.remove();
        }
      });
    });
    
    // Manejar el envío del formulario
    if (orderForm) {
      orderForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Recopilar datos del formulario
        const form = e.target as HTMLFormElement;
        const tableNumber = document.getElementById('table-number') as HTMLInputElement;
        const specialInstructions = document.getElementById('special-instructions') as HTMLTextAreaElement;
        
        // Obtener todos los elementos del pedido
        const nameInputs = document.querySelectorAll('input[name="item-name[]"]');
        const quantityInputs = document.querySelectorAll('input[name="item-quantity[]"]');
        const variationInputs = document.querySelectorAll('input[name="item-variation[]"]');
        
        const items = [];
        
        // Crear objetos de elementos
        for (let i = 0; i < nameInputs.length; i++) {
          const name = (nameInputs[i] as HTMLInputElement).value;
          const quantity = parseInt((quantityInputs[i] as HTMLInputElement).value) || 1;
          const variations = (variationInputs[i] as HTMLInputElement).value;
          
          if (name) {
            const item: {
              name: string;
              quantity: number;
              variations?: string;
            } = {
              name,
              quantity
            };
            
            if (variations) {
              item.variations = variations;
            }
            
            items.push(item);
          }
        }
        
        // Crear objeto de la orden para Supabase
        const orderData = {
          order_id: `ORD-${Math.floor(Math.random() * 10000)}`,
          table_number: tableNumber.disabled ? "desconocida" : (parseInt(tableNumber.value) || "desconocida").toString(),
          special_instructions: specialInstructions.value || undefined,
          status: 'pending'
        };
        
        try {
          // Enviar los datos a nuestra API
          const response = await fetch('/api/orders', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              orderData,
              items
            })
          });
          
          if (response.ok) {
            const result = await response.json();
            console.log('Comanda creada:', result);
            
            // Mostrar mensaje y resetear formulario
            const successMessage = document.createElement('div');
            successMessage.className = 'bg-green-100 border-l-4 border-green-500 text-green-700 p-4 my-4';
            successMessage.innerHTML = `
              <p class="font-bold">¡Comanda creada con éxito!</p>
              <p>ID de comanda: ${result.displayId || result.order_id}</p>
            `;
            
            const formContainer = document.querySelector('#new-order-form');
            formContainer?.parentNode?.insertBefore(successMessage, formContainer);
            
            // Reset the form
            if (orderForm instanceof HTMLFormElement) {
              orderForm.reset();
            }
            
            // Redirigir al dashboard después de 2 segundos
            setTimeout(() => {
              window.location.href = '/';
            }, 2000);
          } else {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Error al crear la comanda');
          }
        } catch (error) {
          console.error('Error al crear la comanda:', error);
          const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
          alert(`Error al crear la comanda: ${errorMessage}`);
        }
      });
    }
  });
</script>
